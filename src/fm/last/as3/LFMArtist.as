/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMArtist class provide methods that calls all last.fm artist web services. * * @includeExample LFMArtistExample.as */public class LFMArtist extends LFMBase {	/**	 * Constructor.	 * @param session need to make calls to last.fm services.	 */	public function LFMArtist(session:ILFMSession) {		super(session);	}	/**	 * Tag an artist with one or more user supplied tags.	 * @param artist the artist name in question.	 * @param tags a comma delimited list of user supplied tags to apply to this artist.	 * Accepts a maximum of 10 tags.	 * @return loader load response.	 */	public function addTags(artist:String, tags:String):URLLoader {		return authenticatedCall({			method:'artist.addTags',			artist:artist,			tags:tags		});	}		/**	 * Use the last.fm corrections data to check whether the supplied artist has a 	 * correction to a canonical artist.	 * 	 * @return loader load response.	 */	public function getCorrection(artist:String):URLLoader{		return call({			method:'artist.getCorrection',			artist:artist		});	}	/**	 * Get a list of upcoming events for this artist. Easily integratable into calendars,	 * using the ical standard (see feeds section below).	 * @param artist the artist name in question.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getEvents(artist:String, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getEvents';		variables.artist = artist;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * @private	 */	public function getGroups():URLLoader{		// TODO: search this method in API (www.last.fm/api)		return null	}		/**	 * Get Images for this artist in a variety of sizes.	 * @param artist the artist name in question	 * @param page wich page of limit amount to display	 * @param limit how many to return. Defaults and maxes out at 50.	 * @param order sort ordering can be either 'popularity' (default) or 'dateadded'.	 *  While ordering by popularity officially selected images by labels and artists will	 *  be ordered first.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response	 */	public function getImages(artist:String, page:Number = NaN, limit:Number = NaN,	                          order:String = null, autocorrect:String = null):URLLoader {		var variables:Object = {			method:'artist.getImages',			artist:artist		};		if (!isNaN(page))			variables.page = page;		if (!isNaN(limit))			variables.limit = limit;		if (order == 'dateadded')			variables.order = order;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get the metadata for an artist on Last.fm. Includes biography.	 * @param artist the name of the artist.	 * @param mbid the musicbrainz id of the artist.	 * @param lang the language to return the biography in, expressed as an ISO 639 alpha-2 code.	 * @return loader load response.	 */	public function getInfo(artist:String = null, mbid:String = null,	                        lang:String = null, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getInfo';		if (artist)			variables.artist = artist;		if (mbid)			variables.mbid = mbid;		if (lang)			variables.lang = lang;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get a paginated list of all the events this artist has played at in the past.	 * @param artist the name of the artist you would like to fetch event listings for.	 * @param page the page of results to return	 * @param limit the maximum number of resutls to return per page	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getPastEvents(artist:String, page:Number = NaN, limit:Number = NaN, 								  autocorrect:String = null):URLLoader {		var variables:Object = {			method:'artist.getPastEvents',			artist:artist		};		if (!isNaN(page))			variables.page = page;		if (!isNaN(limit))			variables.limit = limit;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get a podcast of free mp3s based on an artist	 * @param artist the artist name in question	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getPodcast(artist:String, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getPodcast';		variables.artist = artist;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get shouts for this artist	 * @param artist the artist name in question	 * @param limit an integer userd to limit the number of shouts returnd per page. The	 * default is 50.	 * @param page the page number to fetch.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getShouts(artist:String, limit:Number = NaN, page:Number = NaN, 							  autocorrect:String = null):URLLoader {		var variables:Object = new Object;		variables.method = 'artist.getSHouts';		variables.artist = artist;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get all the artists similar to this artist	 * @param artist the name of the artist.	 * @param limit the number of results to be returned. Default is 30.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getSimilar(artist:String, limit:Number = NaN, 							   autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getSimilar';		variables.artist = artist;		if (!isNaN(limit))			variables.limit = limit;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get the tags applied by an individual user to an artist on Last.fm.	 * @param artist the name of the artist.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getTags(artist:String, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getTags';		variables.artist = artist;		if (autocorrect)			variables.autocorrect = autocorrect;		return authenticatedCall(variables);	}	/**	 * Get the top albums for a specific artist, ordered by popularity.	 * @param artist the name of the artist.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getTopAlbums(artist:String, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getTopAlbums';		variables.artist = artist;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get the top fans for a specific artist, based on listing data.	 * @param artist the name of the artist.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getTopFans(artist:String, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getTopFans';		variables.artist = artist;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get the top tags for a specific artist, ordered by popularity.	 * @param artist the name of the artist.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getTopTags(artist:String, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getTopTags';		variables.artist = artist;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Get the top tracks for a specific artist, ordered by popularity.	 * @param artist the name of the artist.	 * @param autocorrect transform misspelled artist names into correct artist 	 *  names, returning the correct version instead. The corrected artist name will 	 *  be returned in the response.	 * @return loader load response.	 */	public function getTopTracks(artist:String, autocorrect:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.getTopTracks';		variables.artist = artist;		if (autocorrect)			variables.autocorrect = autocorrect;		return call(variables);	}	/**	 * Remove a tag from a specific artist.	 * @param artist the name of the artist.	 * @param tag the name of the tag to remove.	 * @return loader load response.	 */	public function removeTag(artist:String, tag:String):URLLoader {		return authenticatedCall({			method:'artist.removeTag',			artist:artist,			tag:tag		});	}	/**	 * Search for an artist by the artist name.	 * @param artist the name of the artist.	 * @param limit the number of search results to be returned. Default (maximum) is 30.	 * @param page the number of the results page to view. Default is 1.	 * @return loader load response.	 */	public function search(artist:String, limit:Number = NaN,	                       page:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.search';		variables.artist = artist;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return authenticatedCall(variables);	}	/**	 * Share an artist with Last.fm users or other friends.	 * @param artist the name of the artist.	 * @param recipient a comma delimited list of email addresses or Last.fm usernames.	 * The Last.fm web services allow a maximum of 10 (currently only 1 allowed).	 * @param message the message to send to the friends.	 * @param publicShared  optionally show in the sharing users activity feed. Defaults to 0 (false).	 * @return loader load response.	 */	public function share(artist:String, recipient:String, message:String = null,	                      publicShared:Boolean = false):URLLoader {		var variables:Object = new Object();		variables.method = 'artist.share';		variables.artist = artist;		variables.recipient = recipient;		if (message != null)			variables.message = message;		if (publicShared)			variables['public'] = publicShared;		return authenticatedCall(variables);	}		/**	 * Shout in this artist's shoutbox.	 * @param artist the name of the aritst to shout on.	 * @param message the message to post to the shoutbox.	 * @return loader load response.	 */	public function shout(artist:String, message:String):URLLoader {		return authenticatedCall({			method:'artist.shout',			artist:artist,			message:message		});	}}}