/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMLibrary class provide methods that calls all last.fm library web services. * * @includeExample LFMLibraryExample.as */public class LFMLibrary extends LFMBase {	/**	 * Constructor	 * @param session make calls to last.fm services.	 */	public function LFMLibrary(session:ILFMSession) {		super(session);	}	/**	 * Add an album to a user's Last.fm library	 * @param artist the artist that composed the track	 * @param album the album name you wish to add	 * @return loader load response.	 */	public function addAlbum(artist:String, album:String):URLLoader {		return authenticatedCall({			method:'library.addAlbum',			artist:artist,			album:album		});	}	/**	 * Add an artist to a user's Last.fm library	 * @param artist the name you wish to add.	 * @return loader load response.	 */	public function addArtist(artist:String):URLLoader {		return authenticatedCall({			method:'library.addArtist',			artist:artist		});	}	/**	 * Add a track to a user's library.	 * @param artist the artist that composed the track.	 * @param track the track name you wish to add.	 * @return loader load response.	 */	public function addTrack(artist:String, track:String):URLLoader {		return authenticatedCall({			method:'library.addTrack',			artist:artist,			track:track		});	}	/**	 * A paginated list of all the albums in a user's library, with play counts	 * and tag counts.	 * @param user the user whose library you want to fetch.	 * @param artist an artist y wich to filter tracks.	 * @param limit limit the amount of albums returned (maximum/default is 50).	 * @param page the page number you wish to scan to.	 * @return loader load response.	 */	public function getAlbums(user:String, artist:String = null, limit:Number = NaN,	                          page:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'library.getAlbums';		variables.user = user;		if (artist)			variables.artist = artist;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}	/**	 * A paginated list of all the artists in a user's library, with play counts and	 * tag counts.	 * @param user th user whose library you want to fetch	 * @param limit limit the amount of artists returned (maximum/default is 50).	 * @param page the page number you wish to scan to.	 * @return loader load response.	 */	public function getArtists(user:String, limit:Number = NaN,	                           page:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'library.getArtists';		variables.user = user;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}	/**	 * A paginated list of all the tracks in a user's library, with play counts and tag counts.	 * @param user the user whose library you want to fetch.	 * @param artist an artist by wich to filter tracks.	 * @param album an album by which to filter tracks (needs an artist).	 * @param limit limit the amount of tracks returned (maximum/default is 50).	 * @param page the page number you wish to scan to	 * @return loader load response.	 */	public function getTracks(user:String, artist:String = null, album:String = null,	                          limit:Number = NaN, page:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'library.getTracks';		variables.user = user;		if (artist)			variables.artist = artist;		if (album && artist)			variables.album = album;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}}}