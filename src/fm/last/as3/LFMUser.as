/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMUser class provide methods that calls all last.fm user web services. * * @includeExample LFMUserExample.as */public class LFMUser extends LFMBase {	/**	 * Constructor	 * @param session make calls to last.fm services.	 */	public function LFMUser(session:ILFMSession) {		super(session);	}	/**	 * Get a list of tracks by a given artist scrobbled by this user, including scrobble	 * time. Can be limited to specific timeranges, defaults to all time.	 * @param user the last.fm username to fetch the recent tracks of.	 * @param artist the artist name you are interested in.	 * @param startTimestamp an unix timestamp to start at.	 * @param endTimestamp unix timestamp to end at.	 * @param page an integer used to fetch a specific page of tracks.	 * @return loader load response.	 */	public function getArtistTracks(user:String, artist:String,	                                startTimestamp:String = null,	                                endTimestamp:String = null,	                                page:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'user.getArtistTracks';		variables.user = user;		variables.artist = artist;		if (startTimestamp)			variables.startTimestamp = startTimestamp;		if (endTimestamp)			variables.endTimestamp = endTimestamp;		if (!isNaN(page))			variables.page = page;		return call(variables);	}		/**	 * Returns the tracks banned by the user.	 * @param user the user name	 * @paramlimit an integer used to limit the number of tracks returned per page. The default is 50.	 * @param page the page number to fetch.	 * @return loader load response.	 */	public function getBannedTracks(user:String, limit:Number = NaN, page:Number = NaN):URLLoader{		var variables:Object = new Object();		variables.method = 'user.getBannedTracks';		variables.user = user;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}		/**	 * Get a list of upcoming events that this user is attending. Easily integratable	 * into calendars, using the ical standard (see 'more formats' section below).	 * @param user the user to fetch the events for.	 * @return loader load response.	 */	public function getEvents(user:String):URLLoader {		return call({			method:'user.getEvents',			user:user		});	}	/**	 * Get a list of the user's friends on Last.fm.	 * @param user the last.fm username to fetch the friends of.	 * @param recentTracks whether or not to include information about friends' recent	 * listening in the response.	 * @param limit an integer user to limit the number of friends return per page.	 * The default is 50.	 * @param page the page number to fetch.	 * @return loader load response.	 */	public function getFriends(user:String, recentTracks:Boolean = false,	                           limit:Number = NaN, page:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'user.getFriends';		variables.user = user;		if (recentTracks)			variables.recenttracks = recentTracks;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}			/**	 * Get a information about user profile	 * @param user the last.fm user ot fetch profile information.	 * @return loader load response.	 */	public function getInfo(user:String):URLLoader {		return call({			method:'user.getInfo',			user:user		});	}	/**	 * Get the last 50 tracks loved by a user.	 * @param user the user name to fetch the loved tracks for.	 * @param limit an integer used to limit the number of tracks returned per page.	 * The default is 50.	 * @param page the page number to fetch.	 * @return loader load response.	 */	public function getLovedTracks(user:String, limit:Number = NaN, page:Number = NaN			):URLLoader {		var variables:Object = new Object();		variables.method = 'user.getLovedTracks';		variables.user = user;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}	/**	 * Get a list of a user's neighbours on Last.fm.	 * @param user the last.fm username to fetch the neighbours of.	 * @param limit an integer used to limit the number of neighbours returned.	 * @return loader load response.	 */	public function getNeighbours(user:String, limit:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getNeighbours',			user:user		};		if (!isNaN(limit))			variables.limit = limit;		return call(variables);	}	/**	 * Get a paginated list of all events a user has attended in the past.	 * @param user the username to fetch the events for.	 * @param page the page number to scan to.	 * @param limit the maximum number of events to return per page.	 * @return loader load response.	 */	public function getPastEvents(user:String, page:Number = NaN,	                              limit:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getPastEvents',			user:user		};		if (!isNaN(page))			variables.page = page;		if (!isNaN(limit))			variables.limit = limit;		return call(variables);	}    /**     * Get the user's personal tags.     * @param user the user who performed the taggings.     * @param tag the tag you're interested in.     * @param taggingType Optionally onle return items of this type. [artist|album|track]     * @param limit the number of results to return per page.     * @param page the page number to fetch.     * @return loader load response.     */    public function getPersonalTags(user:String, tag:String,                                    taggingType:String = null,                                    limit:Number = NaN,                                    page:Number = NaN):URLLoader{        var variables:Object = {            method:'user.getPersonalTags',            tag:tag        };        if (taggingType)            variables.taggingType = taggingType;        if (!isNaN(limit))            variables.limit = limit;        if (!isNaN(page))            variables.page = page;        return call(variables);    }	/**	 * Get a list of a user's playlists on Last.fm.	 * @param user the last.fm user to fetch the playlists of.	 * @return loader load response.	 */	public function getPlaylists(user:String):URLLoader {		return call({			method:'user.getPlaylists',			user:user		});	}	/**	 * Get a list of the recent Stations listened to by this user.	 * @param user the last.fm username to fetch the recent Stations of.	 * @param limit an integer user to limit the number of stations returned per page.	 * The default is 10, the maximum is 25.	 * @param page the page number to fetch.	 * @return loader load response.	 */	public function getRecentStations(user:String, limit:Number = NaN,	                                  page:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getRecentStations',			user:user		};		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return authenticatedCall(variables);	}	/**	 * Get a list of the recent tracks listened to by this user. Also includes the	 * currently playing track with the nowplaying="true" attribute if the user	 * is currently listening.	 * @param user the last.fm username to fetch the recent tracks of.	 * @param limit an integer used to limit the number of tracks returned.	 * @param page an integer used to fetch a specific page of tracks.	 * @return loader load response.	 */	public function getRecentTracks(user:String, limit:Number = NaN,	                                page:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getRecentTracks',			user:user		};		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}	/**	 * Get Last.fm artist recommendations for a user	 * @return loader load response.	 */	public function getRecommendedArtists():URLLoader {		return authenticatedCall({			method:'user.getRecommendedArtists'		});	}	/**	 * Get a paginated list of all events recommended to a user by Last.fm,	 * based on their listening profile.	 * @param page the page number to scan to.	 * @param limit the number of events to return per page.	 * @return loader load response.	 */	public function getRecommendedEvents(page:Number = NaN,	                                     limit:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getRecommendedEvents'		};		if (!isNaN(page))			variables.page = page;		if (!isNaN(limit))			variables.limit = limit;		return authenticatedCall(variables);	}	/**	 * Get shouts for this user. Also available as an rss feed.	 * @param user the username to fetch shouts for.	 * @return loader load response.	 */	public function getShouts(user:String):URLLoader {		return call({			method:'user.getSHouts',			user:user		});	}	/**	 * Get the top albums listened to by a user. You can stipulate a time period.	 * Sends the overall chart by default.	 * @param user the user name to fetch top albums for.	 * @param period [overall] | [7day] | [3month] | [6month] | [12month] - The time period	 * over which to retrieve top albums for.	 * @return loader load response.	 */	public function getTopAlbums(user:String, period:String = "overall"):URLLoader {		return call({			method:'user.getTopAlbums',			user:user,			period:period		});	}	/**	 * Get the top artists listened to by a user. You can stipulate a time period.	 * Sends the overall chart by default.	 * @param user the user name to fetch top albums for.	 * @param period [overall] | [7day] | [3month] | [6month] | [12month] - The time period	 * over which to retrieve top artists for.	 * @return loader load response.	 */	public function getTopArtists(user:String, period:String = "overall"):URLLoader {		return call({			method:'user.getTopArtists',			user:user,			period:period		});	}	/**	 * Get the top tags used by this user.	 * @param user the user name.	 * @param limit limit the number of tags returned.	 * @return loader load response.	 */	public function getTopTags(user:String, limit:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getTopTags',			user:user		};		if (!isNaN(limit))			variables.limit = limit;		return call(variables);	}	/**	 * Get the top tracks listened to by a user. You can stipulate a time period.	 * Sends the overall chart by default.	 * @param user the user name to fetch top albums for.	 * @param period [overall] | [7day] | [3month] | [6month] | [12month] - The time period	 * over which to retrieve top tracks for.	 * @return loader load response.	 */	public function getTopTracks(user:String, period:String = "overall"):URLLoader {		return call({			method:'user.getTopTracks',			user:user,			period:period		});	}	/**	 * Get an album chart for a user profile, for a given date range. If no date range	 * is supplied, it will return the most recent album chart for this user.	 * @param user the last.fm username to fetch the charts of.	 * @param from the date at which the chart should start from. See User.getChartsList for more.	 * @param to the date at which the chart should end on. See User.getChartsList for more.	 * @return loader load response.	 */	public function getWeeklyAlbumChart(user:String, from:Number = NaN,	                                    to:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getWeeklyAlbumChart',			user:user		}		if (!isNaN(from))			variables.from = from;		if (!isNaN(to))			variables.to = to;		return call(variables);	}	/**	 * Get an artist chart for a user profile, for a given date range. If no date range	 * is supplied, it will return the most recent artist chart for this user.	 * @param user the last.fm username to fetch the charts of.	 * @param from the date at which the chart should start from. See User.getChrtsList for more.	 * @param to the date at which the chart should end on. See User.getChartsList for more.	 * @return loader load response.	 */	public function getWeeklyArtistChart(user:String, from:Number = NaN,	                                     to:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getWeeklyAristChart',			user:user		}		if (!isNaN(from))			variables.from = from;		if (!isNaN(to))			variables.to = to;		return call(variables);	}	/**	 * Get a list of available charts for this user, expressed as date ranges which	 * can be sent to the chart services.	 * @param user the last.fm username to fetch the charts list for.	 * @return loader load response.	 */	public function getWeeklyChartList(user:String):URLLoader {		return call({			method:'user.getWeeklyChartList',			user:user		});	}	/**	 * Get a track chart for a user profile, for a given date range. If no date range	 * is supplied, it will return the most recent track chart for this user.	 * @param user the last.fm username to fetch the charts of.	 * @param from the date at which the chart should start from. See User.getChrtsList for more.	 * @param to the date at which the chart should end on. See User.getChartsList for more.	 * @return loader load response.	 */	public function getWeeklyTrackChart(user:String, from:Number = NaN,	                                    to:Number = NaN):URLLoader {		var variables:Object = {			method:'user.getWeeklyTrackChart',			user:user		}		if (!isNaN(from))			variables.from = from;		if (!isNaN(to))			variables.to = to;		return call(variables);	}	/**	 * Shout on this user's shoutbox	 * @param user the name of the user to shout on.	 * @param message the message to post to the shoutbox.	 * @return loader load response.	 */	public function shout(user:String, message:String):URLLoader {		return authenticatedCall({			method:'user.shout',			user:user,			message:message		});	}}}