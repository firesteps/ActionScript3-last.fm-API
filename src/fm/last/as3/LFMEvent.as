/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMEvent class provide methods that calls all last.fm event web services. * * @includeExample LFMEventExample.as */public class LFMEvent extends LFMBase {	/**	 * Constructor	 * @param session need to make calls to last.fm services.	 */	public function LFMEvent(session:ILFMSession) {		super(session);	}	/**	 * Set a user's attendance status for an event.	 * @param event the numeric last.fm event id	 * @param status the attendance status (0=Attending, 1=Maybe attending, 2=Not attending)	 * @return loader load response.	 */	public function attend(event:Number, status:uint):URLLoader {		return authenticatedCall({			method:'event.attend',			event:event,			status:status		})	}	/**	 * Get a list of attendees for an event.	 * @param event the numeric last.fm event id	 * @return loader load response.	 */	public function getAttendees(event:Number):URLLoader {		return call({			method:'event.getAttendees',			event:event		});	}	/**	 * Get the metadata for an event on Last.fm. Includes attendance and lineup information.	 * @param event the numeric last.fm event id	 * @return loader load response.	 */	public function getInfo(event:Number):URLLoader {		return call({			method:'event.getInfo',			event:event		});	}	/**	 * Get shouts for this event. Also available as an rss feed.	 * @param event the numeric last.fm event id	 * @return loader load response.	 */	public function getShouts(event:Number):URLLoader {		return call({			method:'event.getShouts',			event:event		});	}	/**	 * Share an event with one or more Last.fm users or other friends.	 * @param event an event ID	 * @param recipient Email Address | Last.fm Username - A comma delimited list of	 * email addresses or Last.fm usernames. Maximum is 10.	 * @param publicShare optionally show the share in the sharing users recent activity.	 * Defaults to 0 (false).	 * @param message an optional message to send with the recommendation. If not	 * supplied a default message will be used.	 * @return loader load response.	 */	public function share(event:Number, recipient:String, publicShare:Boolean = false,	                      message:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'event.share';		variables.event = event;		variables.recepient = recipient;		if (publicShare)			variables['public'] = publicShare;		if (message)			variables.message = message;		return authenticatedCall(variables);	}	/**	 * SHout in this event's shoutbox.	 * @param event the id of the event to shout on	 * @param message the message to post to the shoutbox	 * @return loader load response.	 */	public function shout(event:Number, message:String):URLLoader {		return authenticatedCall({			method:'event.shout',			event:event,			message:message		});	}}}