/* Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMVenue class provide methods that calls all last.fm venue web services. * * @includeExample LFMVenueExample.as */public class LFMVenue extends LFMBase {	/**	 * Constructor	 * @param session make calls to last.fm services.	 */	public function LFMVenue(session:ILFMSession) {		super(session);	}	/**	 * Get a list of upcoming events at this venue.	 * @param venue the id for the venue you would like to fetch event listings for.	 * @return loader load response.	 */	public function getEvents(venue:String):URLLoader {		return call({			method:'venue.getEvents',			venue:venue		});	}	/**	 * Get a paginated list of all the events held at this venue in the past.	 * @param venue the id for hte venue you would like to fetch event listings for.	 * @param page the page of results to return.	 * @param limit the maximum number of results to return per page.	 * @return loader load response.	 */	public function getPastEvents(venue:String, page:Number = NaN,	                              limit:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'venue.getPastEvents';		variables.venue = venue;		if (!isNaN(page))			variables.page = page;		if (!isNaN(limit))			variables.limit = limit;		return call(variables);	}	/**	 * Search for a venue by venue name.	 * @param venue the venue name you would like to search for.	 * @param page the results page you would like to fetch.	 * @param limit the number of results to fetch per page. Defaults to 50.	 * @param country Filter your results by country. Expressed as an ISO 3166-2 code.	 * @return loader load response.	 */	public function search(venue:String, page:Number = NaN, limit:Number = NaN,	                       country:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'venue.search';		variables.venue = venue;		if (!isNaN(page))			variables.page = page;		if (!isNaN(limit))			variables.limit = limit;		if (country)			variables.country = country;		return call(variables);	}}}