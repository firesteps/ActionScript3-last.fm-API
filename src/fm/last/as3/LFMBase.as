/* Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {	import flash.net.URLLoader;
	
/** * Base abstract class. */public class LFMBase {		private var _session:ILFMSession;	/**	 * Session contains api key and perhaps session key and make all requests to	 * last.fm services.	 * @return session ILFMSession	 */	public function get session():ILFMSession { return _session; }	public function set session(value:ILFMSession):void { _session = value; }	//	public var showLogMessages:Boolean;		/**	 * Constructor.	 * @param session needs to make call to last.fm services.	 */	public function LFMBase(session:ILFMSession) {		super();		_session = session	}	/**	 * @inheritDoc	 */	protected function call(variables:Object):URLLoader{		if (!session) {/*			if (showLogMessages)				log("Session undefined");*/			return null;		}/*		if (showLogMessages)			log("GET request with variables: " + variablesObjectToString(variables));*/		return session.call(variables);	}		/**	 * @inheritDoc	 */	protected function authenticatedCall(variables:Object):URLLoader{		if (!session) {/*			if (showLogMessages)				log("Session undefined");*/			return null;			}/*		if (showLogMessages)			log("POST request with variables: " + variablesObjectToString(variables));*/		return session.authenticatedCall(variables);	}		private function variablesObjectToString(variables:Object):String{		var result:String = "";		for (var s:String in variables){			result += "  " + s + "=" + variables[s];		}		return result;	}	/*	protected function log(message:String):void{		trace(message);	}*/}}