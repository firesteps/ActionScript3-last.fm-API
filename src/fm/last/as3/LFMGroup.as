/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMGroup class provide methods that calls all last.fm group web services. * * @includeExample LFMGroupExample.as */public class LFMGroup extends LFMBase {	/**	 * Constructor.	 * @param session need to make calls to last.fm services.	 */	public function LFMGroup(session:ILFMSession) {		super(session);	}	/**	 * Get the hype list for group.	 * @param group the last.fm group name.	 * @return loader load response.	 */	public function getHype(group:String):URLLoader {		return call({			method:'group.getHype',			group:group		});	}	/**	 * Get a list of members for this group.	 * @param group the group name to fetch the members of.	 * @return loader load response.	 */	public function getMembers(group:String):URLLoader {		return call({			method:'group.getMembers',			group:group		});	}	/**	 * Get an album chart for a group, for a given date range. If no date range is	 * supplied, it will return the most recent album chart for this group.	 * @param group the last.fm group name to fetch the charts of.	 * @param from the date at which the chart should start from. See	 * Group.getWeeklyChartList for more.	 * @param to the date at which the chart should end on. See	 * Group.getWeeklyChartList for more.	 * @return loader load response.	 * 	 * @see fm.last.as3.LFMGroup.getWeeklyChartList	 */	public function getWeeklyAlbumChart(group:String, from:Number = NaN,	                                    to:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'group.getWeeklyAlbumChart';		variables.group = group;		if (!isNaN(from))			variables.from = from;		if (!isNaN(to))			variables.to = to;		return call(variables);	}	/**	 * Get an artist chart for a group, for a given date range. If no date range is	 * supplied, it will return the most recent album chart for this group.	 * @param group the last.fm group name to fetch the charts of.	 * @param from the date at which the chart should start from. See	 * Group.getWeeklyChartList for more.	 * @param to the date at which the chart should end on. See	 * Group.getWeeklyChartList for more.	 * @return loader load response.	 * 	 * @see fm.last.as3.LFMGroup.getWeeklyChartList 	 */	public function getWeeklyArtistChart(group:String, from:Number = NaN,	                                     to:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'group.getWeeklyArtistChart';		variables.group = group;		if (!isNaN(from))			variables.from = from;		if (!isNaN(to))			variables.to = to;		return call(variables);	}	/**	 * Get a list of available charts for this group, expressed as date ranges which	 * can be sent to the chart services.	 * @param group the last.fm group name to fetch the charts of.	 * @return loader load response.	 */	public function getWeeklyChartList(group:String):URLLoader {		return call({			method:'group.getWeeklyChartList',			group:group		});	}	/**	 * Get a track chart for a group, for a given date range. If no date range is supplied,	 * it will return the most recent album chart for this group.	 * @param group the last.fm group name to fetch the charts of.	 * @param from the date at which the chart should start from. See	 * Group.getWeeklyChartList for more.	 * @param to the date at which the chart should end on. See	 * Group.getWeeklyChartList for more.	 * @return loader load response.	 * 	 * @see fm.last.as3.LFMGroup.getWeeklyChartList	 */	public function getWeeklyTrackChart(group:String, from:Number = NaN,	                                    to:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'group.getWeeklyTrackChart';		variables.group = group;		if (!isNaN(from))			variables.from = from;		if (!isNaN(to))			variables.to = to;		return call(variables);	}}}