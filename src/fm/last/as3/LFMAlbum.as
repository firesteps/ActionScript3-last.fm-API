/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMAlbum class provide methods that calls all last.fm album web services. * @includeExample LFMAlbumExample.as */public class LFMAlbum extends LFMBase {	/**	 * Constructor. 	 * @param session make calls to last.fm services.	 */	public function LFMAlbum(session:ILFMSession) {		super(session);	}	/**	 * Tag an album using a list of user supplied tags.	 * @param artist the artist name in question.	 * @param album the album name in question.	 * @param tags a comma delimited list of user supplied tags to apply to this album.	 * Accepts a maximum of 10 tags.	 * @return loader load response.	 */	public function addTags(artist:String, album:String, tags:String):URLLoader {		return authenticatedCall({			                        method:'album.addTags',			                        artist:artist,			                        alubm:album,			                        tags:tags		                        });	}	/**	 * Get a list of Buy Links for a particular Album. It is required that you supply	 * either the artist and track params or the mbid param.	 * @param artist the artist name in question	 * @param album the album in question	 * @param mbid a MusicBrainz id for the album in questio	 * @param country a country name, as defined by the ISO 3166-1 country names standard	 * @return loader load response.	 */	public function getBuylinks(artist:String = null, album:String = null,	                            mbid:String = null, country:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'album.getBuylinks';		if (artist)			variables.artist = artist;		if (album)			variables.album = album;		if (mbid)			variables.mbid = mbid;		if (country)			variables.country = country;		return call(variables);	}	/**	 * Get the metadata for an album on Last.fm using the album name or a musicbrainz id.	 * See playlist.fetch on how to get the album playlist.	 * @param artist the name of the artist.	 * @param album the name of the album.	 * @param mbid the musicbrainz id for the album.	 * @param username  the username for the context of the request. If supplied, the	 * user's playcount for this album is included in the response.	 * @param lang the language to return the biography in, expressed as an ISO 639	 * alpha-2 code.	 * @return loader load response.	 */	public function getInfo(artist:String = null, album:String = null, mbid:String = null,	                        username:String = null, lang:String = null):URLLoader {		//TODO:see		var variables:Object = new Object();		variables.method = 'album.getInfo';		if (artist)			variables.artist = artist;		if (album)			variables.album = album;		if (mbid)			variables.mbid = mbid;		if (lang)			variables.lang = lang;		return call(variables);	}	/**	 * Get the tags applied by an individual user to an album on Last.fm.	 * @param artist the artist name in question.	 * @param album the album name in question.	 * @return loader load response.	 */	public function getTags(artist:String, album:String):URLLoader {		return authenticatedCall({			                        method:'album.getTags',			                        artist:artist,			                        album:album		                        });	}	/**	 * Get the top tags for an album on Last.fm, ordered by popularity.	 * @param artist the artist name in question.	 * @param album the album name in question.	 */	public function getTopTags(artist:String, album:String):URLLoader {		return call({			                       method:'album.getTopTags',			                       artist:artist,			                       album:album		                       });	}	/**	 * Remove a tag from a specific album.	 * @param artist the artist name in question.	 * @param album the album name in question.	 * @param tag a single user tag to remove from this album.	 * @return loader load response.	 */	public function removeTag(artist:String, album:String, tag:String):URLLoader {		return authenticatedCall({			                        method:'album.removeTag',			                        artist:artist,			                        album:album,			                        tag:tag		                        });	}	/**	 * Search for an album by name. Returns album matches sorted by relevance.	 * @param album the album in question.	 * @param limit limit the number of albums returned at one time. Default (maximum) is 30.	 * @param page scan into the results by specifying a page number. Defaults to first page.	 * @return loader load response.	 */	public function search(album:String, limit:Number = NaN,	                       page:Number = NaN):URLLoader {		var variables:Object = {			method:'album.search',			album:album		};		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}	/**	 * Share an album with one or more Last.fm users or other friends.	 * @param artist an artist name	 * @param album an album name	 * @param recipient email Address | Last.fm Username - A comma delimited list of	 * email addresses or Last.fm usernames. Maximum is 10.	 * @param message an optional message to send with the recommendation. If not	 * supplied a default message will be used.	 * @param publicShare optionally show in the sharing users activity feed.	 * Defaults to 0 (false).	 * @return loader load response.	 */	public function share(artist:String, album:String, recipient:String,	                      message:String = null, publicShare:Boolean = false):URLLoader {		var variables:Object = {			method:'album.share',			artist:artist,			album:album,			recipient:recipient		};		if (message)			variables.message = message;		if (publicShare)			variables['public'] = publicShare;		return authenticatedCall(variables);	}}}