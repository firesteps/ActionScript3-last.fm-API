/* Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMRadio class provide methods that calls all last.fm radio web services. * * @includeExample LFMRadioExample.as */public class LFMRadio extends LFMBase {	/**	 * Constructor	 * @param session make calls to last.fm services.	 */	public function LFMRadio(session:ILFMSession) {		super(session);	}	/**	 * Fetch new radio content periodically in an XSPF format.	 * @param discovery whether to request last.fm content with discovery mode switched on.	 * @param rtp whether the user is scrobbling or not during this radio session	 * (helps content generation)	 * @param bitrate what bitrate to stream content at, in kbps (supported bitrates	 * are 64 and 128)	 * @param buylinks whether the response should contain links for purchase/download,	 * if available (default false)	 * @param speed_multiplier the rate at which to provide the stream (supported	 * multipliers are 1.0 and 2.0)	 * @return loader load response.	 */	public function getPlaylist(discovery:Boolean = false, rtp:Boolean = false,	                            bitrate:Number = NaN, buylinks:Boolean = false,	                            speed_multiplier:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'radio.getPlaylist';		variables.discovery = discovery;		variables.rtp = rtp;		if (bitrate == 64 || bitrate == 128)			variables.bitrate = bitrate;		if (buylinks)			variables.buylinks = buylinks;		if (speed_multiplier == 1.0 || speed_multiplier == 2.0)			variables.speed_multiplier = speed_multiplier;		return authenticatedCall(variables);	}	/**	 * Tune in to a Last.fm radio station.	 * @param station a lastfm radio URL.	 * @param lang an ISO language code to determine the language to return the station	 * name in, expressed as an ISO 639 alpha-2 code.	 * @return loader load response.	 */	public function tune(station:String, lang:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'radio.tune';		variables.station = station;		if (lang)			variables.lang = lang;		return authenticatedCall(variables);	}}}