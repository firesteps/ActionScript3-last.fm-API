/* Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import com.gsolo.encryption.MD5;import flash.events.EventDispatcher;import flash.net.URLLoader;import flash.net.URLRequest;import flash.net.URLRequestMethod;import flash.net.URLVariables;import mx.logging.ILogger;
/** * Sends requests to last.fm service and store session key. *  * @includeExample LFMSessionExample.as */public class LFMSession extends EventDispatcher implements ILFMSession {	private var _apiUrl:String;	private var _apiKey:String;	private var _secret:String;	private var _authUrl:String;	private var _sessionKey:String;	/**	 * @inheritDoc	 */	public function get sessionKey():String { return _sessionKey; }	public function set sessionKey(value:String):void { _sessionKey = value; }		/**	 * @inheritDoc	 */	public function authenticatedCall(variables:Object):URLLoader {		var request:URLRequest = new URLRequest(_apiUrl);		var requestVariables:URLVariables = new URLVariables();		for (var s:String in variables) {			requestVariables[s] = variables[s];		}		requestVariables['api_key'] = _apiKey;		requestVariables['sk'] = _sessionKey;		requestVariables['api_sig'] = getAPISignature(requestVariables);		request.method = URLRequestMethod.POST;		request.data = requestVariables;		return new URLLoader(request);	}		/**	 * @inheritDoc	 */	public function call(variables:Object):URLLoader {		var url:String = _apiUrl;		var amp:String = '?';		for (var s:String in variables) {			url += amp + s + '=' + variables[s];			amp = '&';		}		url += amp + 'api_key=' + _apiKey;		return new URLLoader(new URLRequest(url));	}			/**	 * Constructor	 * @param apiKey API key of your application	 * @param secret sercret tonken for getting sessionKey	 * @param sessionKey session key for make authenticated calls	 * @param apiUrl last.fm service URL	 * @param authUrl last.fm authentication service URL	 */	public function LFMSession(apiKey:String,	                           secret:String = null,	                           sessionKey:String = null,	                           apiUrl:String = "http://ws.audioscrobbler.com/2.0/",	                           authUrl:String = 'http://www.last.fm/api/auth/?') {		super();		_apiKey = apiKey;		_secret = secret;		_sessionKey = sessionKey;		_apiUrl = apiUrl;		_authUrl = authUrl;	}	/**	 * Fetch an unathorized request token for an API account. This is step 2 of the	 * authentication process for desktop applications.	 * Web applications do not need to use this service.	 */	public function getToken():URLLoader {		return call({method:'auth.getToken'});	}	/**	 * Return url of page where last.fm user can grant to your application permission	 * to use his account.	 * @param token auth token	 * @return	 */	public function getRedirectLink(token:String):String {		return _authUrl + 'api_key=' + _apiKey + '&token=' + token;	}	/**	 * Fetch a session key for a user. The third step in the authentication process.	 * See the authentication how-to for more information.	 *	 * @param token a 32-character ASCII hexadecimal MD5 hash returned by	 * step 1 of the authentication process (following the granting of permissions to	 * the application by the user)	 * @return URLLoader	 */	public function getSession(token:String):URLLoader {		var sig:String = getAPISignature({			                                  method:'auth.getSession',			                                  token:token,			                                  api_key:_apiKey		                                  });		var request:URLRequest =				    new URLRequest(_apiUrl + "?method=auth.getSession&api_key=" +				                   _apiKey +				                   '&token=' + token + '&api_sig=' + sig);		return new URLLoader(request);	}	/**	 * Create a web service session for a user. Used for authenticating a user when	 * the password can be inputted by the user. Only suitable for standalone mobile	 * devices. See the authentication how- for more.	 *	 * @param userName the last.fm username.	 * @param password user's password	 * @return URLLoader	 */	public function getMobileSession(userName:String, password:String):URLLoader {		var authToken:String = MD5.encrypt(userName + MD5.encrypt(password));		var request:URLRequest = new URLRequest(_apiUrl);		var requestVariables:URLVariables = new URLVariables();		requestVariables.username = userName;		requestVariables.authToken = authToken;		requestVariables.api_key = _apiKey;		requestVariables.api_sig = getAPISignature(requestVariables);		request.method = URLRequestMethod.POST;		request.data = requestVariables;		return new URLLoader(request);	}	/**	 * Create api signature for making authenticated calls.	 * @param variables request variables	 * @return api signature	 * @private	 */	private function getAPISignature(variables:Object):String {		var array:Array = new Array;		for (var s:String in variables) {			array.push({key:s,value:variables[s]});		}		array.sortOn("key", Array.CASEINSENSITIVE);		var string:String = '';		for (var i:int = 0; i < array.length; i++) {			string += array[i].key + array[i].value;		}		string += _secret;		return MD5.encrypt(string);	}}}