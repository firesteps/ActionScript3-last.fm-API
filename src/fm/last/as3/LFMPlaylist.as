/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMPlaylist class provide methods that calls all last.fm playlist web services. * * @includeExample LFMPlaylistExample.as */public class LFMPlaylist extends LFMBase {	/**	 * Constructor	 * @param session make calls to last.fm services.	 */	public function LFMPlaylist(session:ILFMSession) {		super(session);	}	/**	 * Add a track to a Last.fm user's playlist	 * @param playlistID The ID of the playlist - this is available in user.getPlaylists.	 * @param track The track name to add to the playlist.	 * @param artist The artist name that corresponds to the track to be added.	 * @return loader load response.	 */	public function addTrack(playlistID:String, track:String, artist:String):URLLoader {		return authenticatedCall({			method:'playlist.addTrack',			playlistID:playlistID,			track:track,			artist:artist		});	}	/**	 * Create a Last.fm playlist on behalf of a user	 * @param title title for the playlist.	 * @param description description of the playlist.	 * @return loader load response.	 */	public function create(title:String = null, description:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'palylist.create';		if (title)			variables.title = title;		if (description)			variables.description = description;		return authenticatedCall(variables);	}	/**	 * Fetch XSPF playlists using a lastfm playlist url.	 * @param playlistURL a lastfm protocol playlist url ('lastfm://playlist/...') .	 * See 'playlists' section for more information (http://www.last.fm/api/playlists).	 * @return loader load response.	 */	public function fetch(playlistURL:String):URLLoader {		return call({			method:'playlist.fetch',			playlistURL:playlistURL		});	}}}