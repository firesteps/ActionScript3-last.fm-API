/* Copyright (c) 2008 David White Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.as3 {import flash.net.URLLoader;/** * The LFMTrack class provide methods that calls all last.fm track web services. * * @includeExample LFMTrackExample.as */public class LFMTrack extends LFMBase {	/**	 * Constructor	 * @param session make calls to last.fm services.	 */	public function LFMTrack(session:ILFMSession) {		super(session);	}	/**	 * Tag an album using a list of user supplied tags.	 * @param artist the artist name in question.	 * @param track the track name in question.	 * @param tags a comma delimited list of user supplied tags to apply to this track.	 * Accepts a maximum of 10 tags.	 * @return loader load response.	 */	public function addTags(artist:String, track:String, tags:String):URLLoader {		return authenticatedCall({			method:'track.addTags',			artist:artist,			track:track,			tags:tags		});	}	/**	 * Ban a track for a given user profile. This needs to be supplemented with a	 * scrobbling submission containing the 'ban' rating (see the audioscrobbler API).	 * @param track the track name in question.	 * @param artist the artist name in question	 * @return loader load response.	 */	public function ban(artist:String, track:String):URLLoader {		return authenticatedCall({			method:'track.ban',			track:track,			artist:artist		});	}	/**	 * Get a list of Buy Links for a particular Track. It is required that you supply	 * either the artist and track params or the mbid param.	 * @param artist the artist name in question.	 * @param track the track name in question.	 * @param mbid a MusicBrainz id for the album in question.	 * @param country a country name, as defined by the ISO 3166-1 country names standard.	 * @return loader load response.	 */	public function getBuylinks(artist:String = null, track:String = null,	                            mbid:String = null, country:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'track.getBuylinks';		if (artist)			variables.artist = artist;		if (track)			variables.track = track;		if (mbid)			variables.mbid = mbid;		if (country)			variables.country = country;		return call(variables);	}	/**	 * Retrieve track metadata associated with a fingerprint id generated by the	 * Last.fm Fingerprinter (http://github.com/lastfm/Fingerprinter).	 * Returns track elements, along with a 'rank' value between 0 and 1 reflecting the	 * confidence for each match.	 * See http://blog.last.fm/2010/07/09/fingerprint-api-and-app-updated for more info.	 * @param fingerprintid	 * @return loader load response.	 */	public function getFingerprintMetadata(fingerprintid:String):URLLoader {		return call({			method:'track.getFingerprintMetadate',			fingerprintid:fingerprintid		});	}	/**	 * Get the metadata for a track on Last.fm using the artist/track name or a musicbrainz id.	 * @param artist the artist name in question.	 * @param track the track name in question.	 * @param mbid the musicbrainz id of the the track.	 * @param username the username for the context of the request. If supplied, the	 * user's playcount for this track and wheter they have loved the track is	 * included in the response.	 * @return loader load response.	 */	public function getInfo(artist:String = null, track:String = null,	                        mbid:String = null, username:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'track.getInfo';		if (artist)			variables.artist = artist;		if (track)			variables.track = track;		if (mbid)			variables.mbid = mbid;		if (username)			variables.username = username;		return call(variables);	}	/**	 * Get the similar tracks for this track on Last.fm, based on listening data.	 * @param artist the artist name in question.	 * @param track the track name in question	 * @param mbid the musicbrainz id of the track.	 * @return loader load response.	 */	public function getSimilar(artist:String = null, track:String = null,	                           mbid:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'track.getSimilar';		if (artist)			variables.artist = artist;		if (track)			variables.track = track;		if (mbid)			variables.mbid = mbid;		return call(variables);	}	/**	 * Get the tags applied by an individual user to a track on Last.fm.	 * @param artist the artist name in question.	 * @param track the track name in question	 * @return loader load response.	 */	public function getTags(artist:String, track:String):URLLoader {		return authenticatedCall({			method:'track.getTags',			artist:artist,			track:track		});	}	/**	 * Get the top fans for this track on Last.fm, based on listening data.	 * Supply either track and artist name or musicbrainz id.	 * 	 * @param artist the artist name in question.	 * @param track the track name in question	 * @param mbid the musicbrainz id for the track.	 * @return loader load response.	 */	public function getTopFans(artist:String = null, track:String = null,	                           mbid:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'track.getTopFans';		if (artist)			variables.artist = artist;		if (track)			variables.track = track;		if (mbid)			variables.mbid = mbid;		return call(variables);	}	/**	 * Get the top tags for this track on Last.fm, ordered by tag count.	 * Supply either track and artist name or mbid.	 * @param artist the artist name in question.	 * @param track the track name in question	 * @param mbid the musicbrainz id of the track.	 * @return loader load response.	 */	public function getTopTags(artist:String = null, track:String = null,	                           mbid:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'track.getTopTags';		if (artist)			variables.artist = artist;		if (track)			variables.track = track;		if (mbid)			variables.mbid = mbid;		return call(variables);	}	/**	 * Love a track for a user profile. This needs to be supplemented with a scrobbling	 * submission containing the 'love' rating (see the audioscrobbler API).	 * @param artist the artist name in question.	 * @param track the track name in question	 * @return loader load response.	 */	public function love(artist:String, track:String):URLLoader {		return authenticatedCall({			method:'track.love',			track:track,			artist:artist		});	}	/**	 * Remove a user's tag from a track.	 * @param artist the artist name in question.	 * @param track the track name in question	 * @param tag a single user tag to remove from this track.	 * @return loader load response.	 */	public function removeTag(artist:String, track:String, tag:String):URLLoader {		return authenticatedCall({			method:'track.removeTag',			artist:artist,			track:track,			tag:tag		});	}	/**	 * Search for a track by track name. Returns track matches sorted by relevance.	 * @param artist the artist name in question.	 * @param track the track name in question	 * @param limit the number of search results to be returned. Default (maximum) is 30.	 * @param page the number of the results page to view. Default is 1.	 * @return loader load response.	 */	public function search(track:String, artist:String = null, limit:Number = NaN,	                       page:Number = NaN):URLLoader {		var variables:Object = new Object();		variables.method = 'track.search';		variables.track = track;		if (artist)			variables.artist = artist;		if (!isNaN(limit))			variables.limit = limit;		if (!isNaN(page))			variables.page = page;		return call(variables);	}	/**	 * Share a track twith one or more Last.fm users or other friends.	 * @param artist the artist name in question.	 * @param track the track name in question	 * @param publicShare  optionally show in the sharing users activity feed.	 * Defaults to 0 (false).	 * @param recipient address | Last.fm Username - A comma delimited list of email	 * addresses or Last.fm usernames. Maximum is 10.	 * @param message an optional message to send with the recommendation. If not supplied	 * a default message will be used.	 * @return loader load response.	 */	public function share(artist:String, track:String, recipient:String,	                      publicShare:Boolean = false,	                      message:String = null):URLLoader {		var variables:Object = new Object();		variables.method = 'track.share';		variables.artist = artist;		variables.track = track;		variables.recipient = recipient;		if (publicShare)			variables['public'] = publicShare;		if (message)			variables.message = message;		return authenticatedCall(variables);	}}}