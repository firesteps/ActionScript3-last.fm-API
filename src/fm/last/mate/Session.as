package fm.last.mate {import com.asfusion.mate.actionLists.IScope;import fm.last.as3.LFMSession;/** * <code>Session</code> tag send request to last.fm service. * * <p>If you whant set property using SmartObject use <code>&lt;Properties /&gt;</code> tag * (except session property).</p> * * <p>See <code>LFMSession</code> class for information about methods and arguments.</p> * * @example using Session tag in &lt;EventHandlers /&gt;. * <listing version="3.0"> * &lt;EventHandlers type="{LoginEvent.GET_SESSION_KEY}"&gt; *		&lt;lfm:Session method="getSession" session="{event.session}"&gt; *			&lt;Properties token="{event.token}" /&gt; *			&lt;lfm:resultHandlers&gt; *				&lt;MethodInvoker generator="{LoginController}" method="sessionKeyReceived" *				                  arguments="{[resultObject]}" /&gt; *			&lt;/lfm:resultHandlers&gt; *          &lt;lfm:faultHandlers&gt; *              &lt;MethodInvoker generator="{LoginController}" method="faultHandler" *                                arguments="{[fault]}" /&gt; *          &lt;/lfm:faultHandlers&gt; *		&lt;/lfm:Session&gt; * &lt;/EventHandlers&gt; * </listing> * * @mxml * <p>The <code>&lt;Session&gt;</code> tag has following tag attributes:</p> * <pre> * &lt;Session * <b>Properties</b> * method='String' * session='ILFMSession' * token='String' * userName='String' * authToken='String' * /&gt; * </pre> * * @see fm.last.as3.LFMSession */public class Session extends LFMServiceInvoker {	public var token:String;	public var userName:String;	public var authToken:String;	[Inspectable(enumeration='getToken,getSession,getMobileSession')]	/**	 * @inheritDoc	 */	override public function get method():String { return super.method; }	/**	 * @private	 */	override protected function run(scope:IScope):void {		switch (method) {			case'getToken':				innerHandlersDispatcher = (getSession(scope) as LFMSession).getToken();				break;			case'getSession':				innerHandlersDispatcher = (getSession(scope) as LFMSession).getSession(token);				break;			case'getMobileSession':				innerHandlersDispatcher = (getSession(scope) as LFMSession).getMobileSession(userName, authToken);				break;			default:				methodUndefined(scope);		}	}}}