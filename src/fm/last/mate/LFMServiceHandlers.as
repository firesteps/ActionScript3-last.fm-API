/* Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.mate {import com.asfusion.mate.actionLists.EventHandlers;import com.asfusion.mate.actionLists.IActionList;import com.asfusion.mate.actionLists.IScope;import com.asfusion.mate.actionLists.ServiceScope;import com.asfusion.mate.utils.debug.DebuggerUtil;import flash.events.Event;import flash.events.IOErrorEvent;import flash.net.URLLoader;/** * The inner tag of <code>LFMServiceInvoker</code>. Run when last.fm service * returns a result. Use SmartObject <code>resultObject</code> to get xml response * in <code>resultHandlers</code>, and SmartObject <code>fault</code> to get xml * object with error description in <code>faultHandlers</code>. * <p>Inside this <code>IActionList</code>, you can use the same tags you would in * the main body of a &lt;IActionList&gt;</p> * @private */public class LFMServiceHandlers extends EventHandlers implements IActionList {	/**	 * Constructor.	 */	public function LFMServiceHandlers(inheritedScope:IScope = null){		super();		this.inheritedScope = inheritedScope;	}	/**	 * @inheritDoc	 */	override public function errorString():String {		var eType:String;		try {			var inheritedEvent:Event = inheritedScope.event;			eType = inheritedEvent.type;		}		catch(e:Error) {			eType = type;		}		var str:String = "EventType:" + eType +		                 ". Error was found in a LFMServiceHandlers " +		                 "list (last.fm api mate extension) in file " +		                 DebuggerUtil.getClassName(document);		return str;	}	/**	 * @inheritDoc	 */	override protected function fireEvent(event:Event):void {		if (actions && actions.length > 0) {			var currentScope:ServiceScope = new ServiceScope(inheritedScope.event, debug,			                                                 inheritedScope);			currentScope.owner = this;			if (event.type == Event.COMPLETE) {				currentScope.result = XML(URLLoader(event.target).data);			}			if (event is IOErrorEvent) {				currentScope.fault = XML(URLLoader(event.target).data)			}			setScope(currentScope);			runSequence(currentScope, actions);		}	}}}