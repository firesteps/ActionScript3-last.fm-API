/* Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.mate {import com.asfusion.mate.actionLists.IScope;import com.asfusion.mate.actions.AbstractServiceInvoker;import com.asfusion.mate.actions.IAction;import com.asfusion.mate.core.ISmartObject;import com.asfusion.mate.utils.debug.LogInfo;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.IOErrorEvent;import flash.events.SecurityErrorEvent;import fm.last.as3.ILFMSession;/** * Base calss provide methods and properties for using in mate event map. *  * @private */public class LFMServiceInvoker extends AbstractServiceInvoker implements IAction {	protected var _session:*;	/**	 * Session instance.	 */	public function get session():* { return _session; }	public function set session(value:*):void { _session = value; }	private var _method:String;	/**	 * Method name. You cann't use SmartObject to set this property.	 */	public function get method():String { return _method; }	public function set method(value:String):void { _method = value; }	/**	 * Return session instance (if supplied by SmartObject).	 * @param scope scope of LFMServiceInvoker.	 * @return session instance.	 */	protected function getSession(scope:IScope):ILFMSession {		var aSession:ILFMSession = ILFMSession((session is ISmartObject) ?		                                       (session as ISmartObject).getValue(scope) :		                                       session);		if (!aSession) {			var logInfo:LogInfo = new LogInfo(scope, this, null, _method);			scope.getLogger().error("Session undefined", logInfo);		}		return aSession;	}	/**	 * Called when LFMServiceInvoker cann't recognize method property.	 * @param scope runnign scope of LFMServiceInvoker.	 */	protected function methodUndefined(scope:IScope):void {		// this method will never invoked		// because of [Inspectable] in each method declaration		var logInfo:LogInfo = new LogInfo(scope, currentInstance, null, _method);		scope.getLogger().error("Last.fm service method undefined", logInfo);	}	private function onSecurityError(event:SecurityErrorEvent):void {		(event.target as EventDispatcher).removeEventListener(SecurityErrorEvent.SECURITY_ERROR,		                                                      onSecurityError);		// TODO: test needing of this		//innerHandlersDispatcher.dispatchEvent(new Event(IOErrorEvent.IO_ERROR));				// TODO: mate logger will not log this message, so here just trace()		// to log message you need your own logger instance		trace('Security Error: ' + event);	}	/*------------------------------------------------------------------------------------	 *                               Override Mate Methods	 ------------------------------------------------------------------------------------*/	/**	 * @inheritDoc	 */	protected override function prepare(scope:IScope):void {		super.prepare(scope);		currentInstance = this;	}	/**	 * @inheritDoc	 */	override protected function complete(scope:IScope):void {		if (!innerHandlersDispatcher) return;				innerHandlersDispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR,		                                         onSecurityError);		if (resultHandlers && resultHandlers.length > 0) {			var resultHandlersInstance:LFMServiceHandlers =					    createInnerHandlers(scope, Event.COMPLETE, resultHandlers,					                        LFMServiceHandlers) as LFMServiceHandlers;			resultHandlersInstance.validateNow();		}		// TODO: test this		if ((faultHandlers && faultHandlers.length > 0) /*||		 scope.dispatcher.hasEventListener(UnhandledFaultEvent.FAULT)*/) {			var faultHandlersInstance:LFMServiceHandlers =					    createInnerHandlers(scope, IOErrorEvent.IO_ERROR, faultHandlers,					                        LFMServiceHandlers) as LFMServiceHandlers;			faultHandlersInstance.validateNow();		}	}}}