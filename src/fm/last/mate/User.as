/* Copyright (c) 2010 Omar Valiev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @ignore */package fm.last.mate {import com.asfusion.mate.actionLists.IScope;import fm.last.as3.LFMUser;/** * <code>User</code> tag send request to last.fm service. * * <p>If you whant set property using SmartObject use <code>&lt;Properties /&gt;</code> tag * (except session property).</p> * * <p>See <code>LMFUser</code> class for information about methods and arguments.</p> * * @example using User tag in &lt;EventHandlers /&gt;. * <listing version="3.0"> * &lt;EventHandlers type="{UserEvent.GET_INFO}"&gt; *		&lt;lfm:User method="getInfo" session="{event.session}"&gt; *			&lt;Properties user="{event.user}" /&gt; *			&lt;lfm:resultHandlers&gt; *				&lt;MethodInvoker generator="{AppController}" method="setUserInfo" *				                  arguments="{[resultObject]}" /&gt; *			&lt;/lfm:resultHandlers&gt; *          &lt;lfm:faultHandlers&gt; *              &lt;MethodInvoker generator="{AppController}" method="faultHandler" *                                arguments="{[fault]}" /&gt; *          &lt;/lfm:faultHandlers&gt; *		&lt;/lfm:User&gt; * &lt;/EventHandlers&gt; * </listing> * * @mxml * <p>The <code>&lt;User&gt;</code> tag has following tag attributes:</p> * <pre> * &lt;User * <b>Properties</b> * method='String' * session='ILFMSession' * user='String' * artist='String' * startTimestamp='String' * endTimestamp='String' * page='Number' * recentTracks='Boolean' * limit='Number' * period='String' * from='Number' * to='Number' * message='String' * /&gt; * </pre> * * @see fm.last.as3.LFMUser */public class User extends LFMServiceInvoker {	public var user:String;	public var artist:String;	public var startTimestamp:String;	public var endTimestamp:String;	public var page:Number;	public var recentTracks:Boolean;	public var limit:Number;	public var period:String;	public var from:Number;	public var to:Number;	public var message:String;	private var _user:LFMUser;	[Inspectable(enumeration='getArtistTracks,getEvents,getFriends,getInfo,getLovedTracks,getNeighbours,getPastEvents,getPlaylists,getRecentStations,getRecentTracks,getRecommendedArtists,getRecommendedEvents,getShouts,getTopAlbums,getTopArtists,getTopTags,getTopTracks,getWeeklyAlbumChart,getWeeklyArtistChart,getWeeklyChartList,getWeeklyTrackChart,shout')]	/**	 * @inheritDoc	 */	override public function get method():String { return super.method; }	/**	 * @private	 */	override protected function run(scope:IScope):void {		if (_user)			_user.session = getSession(scope);		else			_user = new LFMUser(getSession(scope));		switch (method) {			case'getArtistTracks':				innerHandlersDispatcher =				_user.getArtistTracks(user, artist, startTimestamp, endTimestamp, page);				break;			case'getEvents':				innerHandlersDispatcher = _user.getEvents(user);				break;			case'getFriends':				innerHandlersDispatcher = _user.getFriends(user, recentTracks, limit, page);				break;			case'getInfo':				innerHandlersDispatcher = _user.getInfo(user);				break;			case 'getLovedTracks':				innerHandlersDispatcher = _user.getLovedTracks(user, limit, page);				break;			case'getNeighbours':				innerHandlersDispatcher = _user.getNeighbours(user, limit);				break;			case'getPastEvents':				innerHandlersDispatcher = _user.getPastEvents(user, page, limit);				break;			case'getPlaylists':				innerHandlersDispatcher = _user.getPlaylists(user);				break;			case'getRecentStations':				innerHandlersDispatcher = _user.getRecentStations(user, limit, page);				break;			case'getRecentTracks':				innerHandlersDispatcher = _user.getRecentTracks(user, limit, page);				break;			case'getRecommendedArtists':				innerHandlersDispatcher = _user.getRecommendedArtists();				break;			case'getRecommendedEvents':				innerHandlersDispatcher = _user.getRecommendedEvents(page, limit);				break;			case'getShouts':				innerHandlersDispatcher = _user.getShouts(user);				break;			case'getTopAlbums':				innerHandlersDispatcher = _user.getTopAlbums(user, period);				break;			case'getTopArtists':				innerHandlersDispatcher = _user.getTopArtists(user, period);				break;			case'getTopTags':				innerHandlersDispatcher = _user.getTopTags(user, limit);				break;			case'getTopTracks':				innerHandlersDispatcher = _user.getTopTracks(user, period);				break;			case'getWeeklyAlbumChart':				innerHandlersDispatcher = _user.getWeeklyAlbumChart(user, from, to);				break;			case'getWeeklyArtistChart':				innerHandlersDispatcher = _user.getWeeklyArtistChart(user, from, to);				break;			case'getWeeklyChartList':				innerHandlersDispatcher = _user.getWeeklyChartList(user);				break;			case'getWeeklyTrackChart':				innerHandlersDispatcher = _user.getWeeklyTrackChart(user, from, to);				break;			case'shout':				innerHandlersDispatcher = _user.shout(user, message);				break;			default:				methodUndefined(scope);		}	}}}